<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python基础随摘]]></title>
    <url>%2F2018%2F10%2F22%2FPython%E5%9F%BA%E7%A1%80%E9%9A%8F%E6%91%98%2F</url>
    <content type="text"><![CDATA[注：这是笔者当时学习Python基础的时候有几点觉得有意思或是掌握不到位的地方，因此摘录。参考资料：中文Python笔记 1. python之禅反映了python优雅、简洁、明确的设计哲学的一首诗。自带于python解释器中。输入:import this将出现:123456789101112131415161718192021The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren&apos;t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you&apos;re Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it&apos;s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let&apos;s do more of those! 自行体会~ 2. ipython与magic命令”%”ipython是一个命令行下可交互的解释器。它提供了%开头的magic命令。使用这些命令可以方便地对当前工作空间进行操作，类似于linux的命令行命令。查看magic命令：%lsmagic列举一些很有用的magic命令:查看当前空间变量：%whos重置当前空间变量：%reset -f查看当前工作文件夹：%pwd新建文件夹：%mkdir demo_test改变路径/返回上层：cd demo_test cd ..将当前cell内容写入文件：12%%writefile demo.pyxxx...(代码) 查看当前文件夹文件：%ls用run命令运行某代码：%run xxx.py删除某文件：12import os os.remove(&apos;xxx.py&apos;) 删除文件夹：%rmdir demo查看历史命令：%hist命令计时（可以测计算速度）：%timeit xxx查看函数使用帮助：xxx?,查看帮助与源代码:xxx??用可获得上个cell的输出：` + 13可用！执行一些系统命令，如：!ping baidu.com`注意%与%%的区别，%作用于单行，%%作用于整个cell 3. 关于元组tuple首先，不同于列表，元组不可变。其仍然可以索引切片。为什么需要元组？旧式字符串格式化中参数要用元组；在字典中当作键值；数据库的返回值……等。相同长度下，元组在各项处理速度上优于或等于列表，尤其是生成速度 4. 关于集合set集合是一种无序的序列，集合的元素具有唯一性，为了确保这种唯一性，集合中放入的元素需要为不可变对象。有一种不可变集合（用frozenset方法），一旦创建就不可以改变，它可以用来作为字典的键：123456flight_distance = &#123;&#125;city_pair = frozenset([&apos;Los Angeles&apos;, &apos;New York&apos;])flight_distance[city_pair] = 2498flight_distance[frozenset([&apos;Austin&apos;, &apos;Los Angeles&apos;])] = 1233flight_distance[frozenset([&apos;Austin&apos;, &apos;New York&apos;])] = 1515flight_distance 得到字典:123&#123;frozenset(&#123;&apos;Austin&apos;, &apos;New York&apos;&#125;): 1515, frozenset(&#123;&apos;Austin&apos;, &apos;Los Angeles&apos;&#125;): 1233, frozenset(&#123;&apos;Los Angeles&apos;, &apos;New York&apos;&#125;): 2498&#125; 集合不分顺序，所以无论是键为{‘Austin’, ‘New York’}还是{‘New York’, ‘Austin’}不影响查询结果。 5. 函数参数、返回与map方法 参数：在函数传入参数时，有两种形式值得注意：*args和**kwargs。他们都表示参数数目不定。 其中*args表示可以直接传入多个参数，它相当于元组。实际上，对于这类函数，可以用元组的方式传入参数，只要在代表元组的变量前加*号。 **kwargs(key words args)表示必须通过键值对的方式传入多个参数，它相当于字典。对于这类函数，可以用字典的方式传入参数，同样，要加**号。 返回：函数如果有多个返回值，那么它实际上返回的是一个元组。 map方法：利用map方法，我们可以通过函数来生成序列。可以理解为将原始序列的所有元素都通过某方法map为目标序列，如下： 12345def sqr(x): return x ** 2a = [2, 3, 4]b = [i for i in map(sqr, a)]print (b) 输出：[4, 9, 16]值得注意的是，这里的map(xxx)直接打印输出会是一个对象，它是一个迭代器（Python3中），需要用一个循环来读取它的内容。 6. 模块与包模块：Python会将包含在环境路径中的所有.py文件识别成可导入模块，使用import可导入。在导入时，Python会执行一遍模块中的所有内容，但它只会执行一次，若有修改要想再次导入，需用reload函数。.py文件自带name属性，文件被执行时，该属性值会变成’__main__‘。 包：包实际上是一个文件夹，文件夹中可以包含一些.py文件，此外还包含一个__init__.py文件，它说明该文件夹是一个包，它可以是一个空文件，但要存在。 7. 关于异常在一般程序句中，发生错误异常将会使程序停止执行，若不希望停止，则使用try的形式。1)try与except: try块出现异常，其后的代码将被忽略，Python将寻找except后的异常类型，找到则执行此块，没有则抛出。如下，ValueError表示异常类型，如果它不匹配try中的异常，将直接抛出而不执行except块：1234try: ...except ValueError: ... 2)try与Exception：Exception用来捕获所有异常，其后不需加异常类型。意味着try中所有异常类型都可以激活Exception模块。这相当于直接用except:，一般不推荐这种用法。3)自定义异常：可以自定义异常，使用raise关键词来抛出异常。]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>代码基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开篇记：我为什么想写博客]]></title>
    <url>%2F2018%2F05%2F27%2F%E5%BC%80%E7%AF%87%E8%AE%B0%EF%BC%9A%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%83%B3%E5%86%99%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[开卷有益，下笔升华。 &emsp;&emsp;我为什么想写博客？当学生那么多年以来，我发现学习最有效的方式之一就是将学到东西通过自己的理解再表达出来（还有一个最有效的方式就是不断地用它）。当下而言，动机无非有这几点: 1.知识管理与深化学习&emsp;&emsp;其实最大的初衷很简单，也许和大部分人一样，通过写下自己学到的东西和对事物的理解感悟来进行知识管理，这同时也是自我整理的一个过程。互联网时代的信息太零散了，我们每天接收着比以往任何时候都多的信息，并且有相当一部分人将其看做知识，但真正有价值的知识应该是系统的，有条理的。网上每一次的搜索可以看成是一次信息的获取，但是将其整理成有条理的，系统的，可以被称为知识的东西才是学习最重要的环节。所以，我又将其定位为深化学习的工具，寄希望能极大地提高学习成效。要实现这一点，需要良好的习惯和强大的自律能力。所以，这也算一次极大的挑战。 2.输出的快乐与输入的危机&emsp;&emsp;在我决定建博客之前，曾在自己的公众号上创作过三篇文章，发现将自己的想法和最近的学习成果写成文分享给他人是一种能获得持续快感的行为，尤其是当很多人点赞或是讨论你文章的时候。与此对应的，一次次的输出将消耗知识储备，最终将无文可写，这种输入危机将鞭策我去获得更多的知识、经历，或者说，谈资。这种过程，痛并快乐。 3.互联网，世界很小，别让生活太无趣&emsp;&emsp;比起公众号，博客也许是更正规一些的东西，在我看来不显得那么快餐化，符合学习与讨论的目的。博客更适合写长文章和技术向的文章，更适合通过电脑端浏览，互动性更高。世界很小，通过博客能更好地结识五湖四海志同道合的朋友。一个人默默地学习工作太过无趣，而一群人的讨论和思想碰撞也许就是狂欢了。 写在最后为了完整领悟博客的精髓，我花了7个小时从0开始在github上搭建了个人主页，并希望在日后能不断完善网站，形成自己想要的风格。关于这部分的具体内容，有时间我也会陆续发布在博客上。 放在博客上的文章将以技术向为主，主要记录学习经历，并夹杂自己的理解和感悟，力求叙事清晰明白，逻辑性强，期望与君共享。 最后推广一下我的github page主页&emsp; 以及公众号：czz_desk&emsp;，哈哈哈 感谢阅读！]]></content>
      <tags>
        <tag>随笔与感想</tag>
      </tags>
  </entry>
</search>
